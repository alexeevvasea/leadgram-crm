{"ast":null,"code":"import axios from 'axios';\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API_BASE = `${BACKEND_URL}/api`;\n\n// Создаем экземпляр axios с базовой конфигурацией\nconst api = axios.create({\n  baseURL: API_BASE,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Добавляем Telegram WebApp auth данные в заголовки\napi.interceptors.request.use(config => {\n  // Получаем данные из Telegram WebApp\n  if (window.Telegram && window.Telegram.WebApp) {\n    const initData = window.Telegram.WebApp.initData;\n    if (initData) {\n      config.headers['X-Telegram-Init-Data'] = initData;\n    }\n  }\n  return config;\n});\n\n// Обработка ошибок\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', error);\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Обработка неавторизованного доступа\n    console.warn('Unauthorized access');\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","API_BASE","api","create","baseURL","timeout","headers","interceptors","request","use","config","window","Telegram","WebApp","initData","response","error","_error$response","console","status","warn","Promise","reject"],"sources":["/app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API_BASE = `${BACKEND_URL}/api`;\n\n// Создаем экземпляр axios с базовой конфигурацией\nconst api = axios.create({\n  baseURL: API_BASE,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Добавляем Telegram WebApp auth данные в заголовки\napi.interceptors.request.use((config) => {\n  // Получаем данные из Telegram WebApp\n  if (window.Telegram && window.Telegram.WebApp) {\n    const initData = window.Telegram.WebApp.initData;\n    if (initData) {\n      config.headers['X-Telegram-Init-Data'] = initData;\n    }\n  }\n  return config;\n});\n\n// Обработка ошибок\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    if (error.response?.status === 401) {\n      // Обработка неавторизованного доступа\n      console.warn('Unauthorized access');\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;AACrD,MAAMC,QAAQ,GAAG,GAAGJ,WAAW,MAAM;;AAErC;AACA,MAAMK,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC;EACA,IAAIC,MAAM,CAACC,QAAQ,IAAID,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC7C,MAAMC,QAAQ,GAAGH,MAAM,CAACC,QAAQ,CAACC,MAAM,CAACC,QAAQ;IAChD,IAAIA,QAAQ,EAAE;MACZJ,MAAM,CAACJ,OAAO,CAAC,sBAAsB,CAAC,GAAGQ,QAAQ;IACnD;EACF;EACA,OAAOJ,MAAM;AACf,CAAC,CAAC;;AAEF;AACAR,GAAG,CAACK,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACTC,OAAO,CAACF,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,IAAI,EAAAC,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;IAClC;IACAD,OAAO,CAACE,IAAI,CAAC,qBAAqB,CAAC;EACrC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}