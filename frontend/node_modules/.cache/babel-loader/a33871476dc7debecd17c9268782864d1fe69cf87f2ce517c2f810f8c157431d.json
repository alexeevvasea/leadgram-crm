{"ast":null,"code":"import api from './api';\nexport const messageService = {\n  // Получить сообщения клиента\n  getClientMessages: async (clientId, limit = 100) => {\n    const response = await api.get(`/messages/client/${clientId}`, {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  // Получить последние сообщения (unified inbox)\n  getRecentMessages: async (limit = 50) => {\n    const response = await api.get('/messages', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  // Отправить ответ\n  sendResponse: async (clientId, content) => {\n    const response = await api.post('/messages/respond', {\n      client_id: clientId,\n      content: content\n    });\n    return response.data;\n  },\n  // Создать сообщение\n  createMessage: async messageData => {\n    const response = await api.post('/messages', messageData);\n    return response.data;\n  },\n  // Отметить сообщение как прочитанное\n  markAsRead: async messageId => {\n    const response = await api.patch(`/messages/${messageId}/read`);\n    return response.data;\n  },\n  // Получить количество непрочитанных сообщений\n  getUnreadCount: async () => {\n    const response = await api.get('/messages/unread-count');\n    return response.data;\n  },\n  // Поиск по сообщениям\n  searchMessages: async (query, limit = 50) => {\n    const response = await api.get('/messages/search', {\n      params: {\n        query,\n        limit\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","messageService","getClientMessages","clientId","limit","response","get","params","data","getRecentMessages","sendResponse","content","post","client_id","createMessage","messageData","markAsRead","messageId","patch","getUnreadCount","searchMessages","query"],"sources":["/app/frontend/src/services/messageService.js"],"sourcesContent":["import api from './api';\n\nexport const messageService = {\n  // Получить сообщения клиента\n  getClientMessages: async (clientId, limit = 100) => {\n    const response = await api.get(`/messages/client/${clientId}`, { params: { limit } });\n    return response.data;\n  },\n\n  // Получить последние сообщения (unified inbox)\n  getRecentMessages: async (limit = 50) => {\n    const response = await api.get('/messages', { params: { limit } });\n    return response.data;\n  },\n\n  // Отправить ответ\n  sendResponse: async (clientId, content) => {\n    const response = await api.post('/messages/respond', {\n      client_id: clientId,\n      content: content,\n    });\n    return response.data;\n  },\n\n  // Создать сообщение\n  createMessage: async (messageData) => {\n    const response = await api.post('/messages', messageData);\n    return response.data;\n  },\n\n  // Отметить сообщение как прочитанное\n  markAsRead: async (messageId) => {\n    const response = await api.patch(`/messages/${messageId}/read`);\n    return response.data;\n  },\n\n  // Получить количество непрочитанных сообщений\n  getUnreadCount: async () => {\n    const response = await api.get('/messages/unread-count');\n    return response.data;\n  },\n\n  // Поиск по сообщениям\n  searchMessages: async (query, limit = 50) => {\n    const response = await api.get('/messages/search', { params: { query, limit } });\n    return response.data;\n  },\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACAC,iBAAiB,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,GAAG,GAAG,KAAK;IAClD,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,oBAAoBH,QAAQ,EAAE,EAAE;MAAEI,MAAM,EAAE;QAAEH;MAAM;IAAE,CAAC,CAAC;IACrF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACAC,iBAAiB,EAAE,MAAAA,CAAOL,KAAK,GAAG,EAAE,KAAK;IACvC,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,WAAW,EAAE;MAAEC,MAAM,EAAE;QAAEH;MAAM;IAAE,CAAC,CAAC;IAClE,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACAE,YAAY,EAAE,MAAAA,CAAOP,QAAQ,EAAEQ,OAAO,KAAK;IACzC,MAAMN,QAAQ,GAAG,MAAML,GAAG,CAACY,IAAI,CAAC,mBAAmB,EAAE;MACnDC,SAAS,EAAEV,QAAQ;MACnBQ,OAAO,EAAEA;IACX,CAAC,CAAC;IACF,OAAON,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACAM,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,MAAMV,QAAQ,GAAG,MAAML,GAAG,CAACY,IAAI,CAAC,WAAW,EAAEG,WAAW,CAAC;IACzD,OAAOV,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACAQ,UAAU,EAAE,MAAOC,SAAS,IAAK;IAC/B,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACkB,KAAK,CAAC,aAAaD,SAAS,OAAO,CAAC;IAC/D,OAAOZ,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACAW,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAMd,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOD,QAAQ,CAACG,IAAI;EACtB,CAAC;EAED;EACAY,cAAc,EAAE,MAAAA,CAAOC,KAAK,EAAEjB,KAAK,GAAG,EAAE,KAAK;IAC3C,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,kBAAkB,EAAE;MAAEC,MAAM,EAAE;QAAEc,KAAK;QAAEjB;MAAM;IAAE,CAAC,CAAC;IAChF,OAAOC,QAAQ,CAACG,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}