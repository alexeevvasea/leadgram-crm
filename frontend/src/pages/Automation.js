import React, { useState, useEffect } from 'react';
import { FiPlus, FiPlay, FiPause, FiSettings, FiZap, FiRefreshCw } from 'react-icons/fi';
import api from '../services/api';
import LoadingSpinner from '../components/LoadingSpinner';

const Automation = () => {
  const [automations, setAutomations] = useState([]);
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadAutomationData();
  }, []);

  const loadAutomationData = async () => {
    try {
      setLoading(true);
      const [automationsResponse, templatesResponse] = await Promise.all([
        api.get('/automation'),
        api.get('/automation/templates')
      ]);
      
      setAutomations(automationsResponse.data);
      setTemplates(templatesResponse.data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
      console.error('Error loading automation data:', err);
    } finally {
      setLoading(false);
    }
  };

  const getTriggerText = (trigger) => {
    switch (trigger) {
      case 'new_message': return '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
      case 'no_response': return '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
      case 'time_based': return '–ü–æ –≤—Ä–µ–º–µ–Ω–∏';
      case 'manual': return '–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return 'text-green-600 bg-green-50';
      case 'inactive': return 'text-gray-600 bg-gray-50';
      case 'paused': return 'text-yellow-600 bg-yellow-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–Ω–∞';
      case 'inactive': return '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      case 'paused': return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const toggleAutomation = async (automationId, currentStatus) => {
    try {
      const newStatus = currentStatus === 'active' ? 'paused' : 'active';
      await api.put(`/automation/${automationId}`, { status: newStatus });
      loadAutomationData();
    } catch (err) {
      console.error('Error toggling automation:', err);
    }
  };

  const testAutomation = async (automationId) => {
    try {
      const response = await api.post(`/automation/${automationId}/test`, {
        test_message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      });
      alert('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
      console.error('Error testing automation:', err);
    }
  };

  const createFromTemplate = async (template) => {
    try {
      const response = await api.post('/automation', {
        name: template.name,
        description: template.description,
        trigger: template.trigger,
        conditions: template.conditions || {},
        actions: template.actions || []
      });
      
      alert('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      loadAutomationData();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
      console.error('Error creating automation:', err);
    }
  };

  if (loading) {
    return <LoadingSpinner text="–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏..." />;
  }

  return (
    <div className="p-4 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h1>
          <p className="text-gray-600 mt-1">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          </p>
        </div>
        <button
          onClick={loadAutomationData}
          className="p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100"
        >
          <FiRefreshCw className="w-5 h-5" />
        </button>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center space-x-3">
            <span className="text-red-600">{error}</span>
            <button
              onClick={loadAutomationData}
              className="text-blue-600 hover:text-blue-800 text-sm underline"
            >
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ */}
      {automations.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-4 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">
              –í–∞—à–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            </h3>
          </div>
          <div className="p-4 space-y-4">
            {automations.map((automation) => (
              <div
                key={automation.id}
                className="flex items-center justify-between p-4 border border-gray-200 rounded-lg"
              >
                <div className="flex items-center space-x-4">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <FiZap className="w-5 h-5 text-purple-600" />
                  </div>
                  <div>
                    <h4 className="font-medium text-gray-900">
                      {automation.name}
                    </h4>
                    <p className="text-sm text-gray-600 mb-1">
                      {automation.description}
                    </p>
                    <div className="flex items-center space-x-3 text-xs text-gray-500">
                      <span>–¢—Ä–∏–≥–≥–µ—Ä: {getTriggerText(automation.trigger)}</span>
                      <span>‚Ä¢</span>
                      <span>{automation.actions?.length || 0} –¥–µ–π—Å—Ç–≤–∏–π</span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(automation.status)}`}>
                    {getStatusText(automation.status)}
                  </span>
                  
                  <button
                    onClick={() => toggleAutomation(automation.id, automation.status)}
                    className="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-full transition-colors"
                    title={automation.status === 'active' ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                  >
                    {automation.status === 'active' ? (
                      <FiPause className="w-4 h-4" />
                    ) : (
                      <FiPlay className="w-4 h-4" />
                    )}
                  </button>
                  
                  <button
                    onClick={() => testAutomation(automation.id)}
                    className="p-2 text-green-600 hover:text-green-800 hover:bg-green-50 rounded-full transition-colors"
                    title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    <FiZap className="w-4 h-4" />
                  </button>
                  
                  <button
                    className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-50 rounded-full transition-colors"
                    title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                  >
                    <FiSettings className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –®–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">
            –®–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
          </h3>
        </div>
        <div className="p-4 space-y-4">
          {templates.map((template) => (
            <div
              key={template.id}
              className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:shadow-sm transition-shadow"
            >
              <div className="flex items-center space-x-4">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <FiZap className="w-5 h-5 text-blue-600" />
                </div>
                <div>
                  <h4 className="font-medium text-gray-900">
                    {template.name}
                  </h4>
                  <p className="text-sm text-gray-600 mb-1">
                    {template.description}
                  </p>
                  <div className="flex items-center space-x-3 text-xs text-gray-500">
                    <span>–¢—Ä–∏–≥–≥–µ—Ä: {getTriggerText(template.trigger)}</span>
                    <span>‚Ä¢</span>
                    <span>{template.actions?.length || 0} –¥–µ–π—Å—Ç–≤–∏–π</span>
                  </div>
                </div>
              </div>
              
              <button
                onClick={() => createFromTemplate(template)}
                className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <FiPlus className="w-4 h-4" />
                <span>–°–æ–∑–¥–∞—Ç—å</span>
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ n8n */}
      <div className="bg-purple-50 rounded-lg p-4">
        <h4 className="font-medium text-purple-900 mb-2">
          üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å n8n
        </h4>
        <p className="text-sm text-purple-800 mb-3">
          –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ n8n - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflows.
        </p>
        <div className="text-sm text-purple-700 space-y-1">
          <div>‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π</div>
          <div>‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ª—é–±—ã–º–∏ API</div>
          <div>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É</div>
          <div>‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</div>
        </div>
      </div>

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {automations.length === 0 && (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <FiZap className="w-8 h-8 text-purple-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
          </h3>
          <p className="text-gray-600 max-w-md mx-auto mb-6">
            –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤—ã—à–µ
          </p>
        </div>
      )}
    </div>
  );
};

export default Automation;