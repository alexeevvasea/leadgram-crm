import React, { useState, useEffect } from 'react';
import { FiPlus, FiSettings, FiCheck, FiX, FiRefreshCw, FiAlertCircle } from 'react-icons/fi';
import api from '../services/api';
import LoadingSpinner from '../components/LoadingSpinner';

const Integrations = () => {
  const [integrations, setIntegrations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadIntegrations();
  }, []);

  const loadIntegrations = async () => {
    try {
      setLoading(true);
      const response = await api.get('/integrations');
      setIntegrations(response.data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π');
      console.error('Error loading integrations:', err);
    } finally {
      setLoading(false);
    }
  };

  const getIntegrationIcon = (type) => {
    switch (type) {
      case 'telegram': return 'üì±';
      case 'whatsapp': return 'üí¨';
      case 'olx': return 'üè™';
      case 'n8n': return 'üîß';
      default: return '‚öôÔ∏è';
    }
  };

  const getIntegrationTitle = (type) => {
    switch (type) {
      case 'telegram': return 'Telegram';
      case 'whatsapp': return 'WhatsApp';
      case 'olx': return 'OLX';
      case 'n8n': return 'n8n –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return 'text-green-600 bg-green-50';
      case 'inactive': return 'text-gray-600 bg-gray-50';
      case 'error': return 'text-red-600 bg-red-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–Ω–∞';
      case 'inactive': return '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      case 'error': return '–û—à–∏–±–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const testIntegration = async (integrationId) => {
    try {
      const response = await api.post(`/integrations/test/${integrationId}`);
      alert('–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
      console.error('Error testing integration:', err);
    }
  };

  const availableIntegrations = [
    {
      type: 'telegram',
      title: 'Telegram',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram',
      icon: 'üì±',
      comingSoon: false
    },
    {
      type: 'whatsapp',
      title: 'WhatsApp Business',
      description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WhatsApp Business API',
      icon: 'üí¨',
      comingSoon: true
    },
    {
      type: 'olx',
      title: 'OLX',
      description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å OLX –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏',
      icon: 'üè™',
      comingSoon: true
    },
    {
      type: 'n8n',
      title: 'n8n –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
      description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏',
      icon: 'üîß',
      comingSoon: false
    }
  ];

  if (loading) {
    return <LoadingSpinner text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π..." />;
  }

  return (
    <div className="p-4 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h1>
          <p className="text-gray-600 mt-1">
            –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
          </p>
        </div>
        <button
          onClick={loadIntegrations}
          className="p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100"
        >
          <FiRefreshCw className="w-5 h-5" />
        </button>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center space-x-3">
            <FiAlertCircle className="w-5 h-5 text-red-500" />
            <span className="text-red-600">{error}</span>
            <button
              onClick={loadIntegrations}
              className="text-blue-600 hover:text-blue-800 text-sm underline"
            >
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
      {integrations.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="p-4 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">
              –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            </h3>
          </div>
          <div className="p-4 space-y-4">
            {integrations.map((integration) => (
              <div
                key={integration.id}
                className="flex items-center justify-between p-4 border border-gray-200 rounded-lg"
              >
                <div className="flex items-center space-x-4">
                  <div className="text-2xl">
                    {getIntegrationIcon(integration.type)}
                  </div>
                  <div>
                    <h4 className="font-medium text-gray-900">
                      {integration.name}
                    </h4>
                    <p className="text-sm text-gray-600">
                      {getIntegrationTitle(integration.type)}
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(integration.status)}`}>
                    {getStatusText(integration.status)}
                  </span>
                  
                  <button
                    onClick={() => testIntegration(integration.id)}
                    className="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-full transition-colors"
                    title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    <FiCheck className="w-4 h-4" />
                  </button>
                  
                  <button
                    className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-50 rounded-full transition-colors"
                    title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                  >
                    <FiSettings className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
          </h3>
        </div>
        <div className="p-4 grid grid-cols-1 md:grid-cols-2 gap-4">
          {availableIntegrations.map((integration) => (
            <div
              key={integration.type}
              className="p-4 border border-gray-200 rounded-lg hover:shadow-sm transition-shadow"
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  <div className="text-2xl mt-1">
                    {integration.icon}
                  </div>
                  <div>
                    <h4 className="font-medium text-gray-900 mb-1">
                      {integration.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-3">
                      {integration.description}
                    </p>
                    
                    {integration.comingSoon ? (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                        –°–∫–æ—Ä–æ
                      </span>
                    ) : (
                      <button
                        onClick={() => alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö')}
                        className="inline-flex items-center px-3 py-1 rounded-lg text-sm font-medium text-blue-600 bg-blue-50 hover:bg-blue-100 transition-colors"
                      >
                        <FiPlus className="w-4 h-4 mr-1" />
                        –ü–æ–¥–∫–ª—é—á–∏—Ç—å
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="bg-blue-50 rounded-lg p-4">
        <h4 className="font-medium text-blue-900 mb-2">
          üí° –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
        </h4>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>‚Ä¢ –î–ª—è Telegram: —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather</li>
          <li>‚Ä¢ –î–ª—è WhatsApp: –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Business API</li>
          <li>‚Ä¢ –î–ª—è OLX: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</li>
          <li>‚Ä¢ –î–ª—è n8n: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–ª–∞—á–Ω—ã–π</li>
        </ul>
      </div>
    </div>
  );
};

export default Integrations;